import { APPEVENTS, AppEvents } from './events';
import { BrowserWindow, app, ipcMain } from 'electron';
import { getState, setState } from "./utils/state";

import { gotoMainPage } from './config/app';

const appEvents = AppEvents.Instance;
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;



// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('settings:save', async (event, settings) => {
  const state = await getState();
  const newSettings = { ...state.settings, ...settings };
  const newState = { ...state, settings: newSettings };
  await setState(newState);
  return newState;
});

const setListStartStop = async (isStart: boolean) => {
  const state = await getState();
  const newState = { ...state, isListRunning: isStart };
  await setState(newState);
  return newState;
}

ipcMain.handle('list:start', async (event, ...args) => {
  const url = "https://ca.indeed.com/jobs?q=nodejs";
  await setListStartStop(true);
  await gotoMainPage(url);
  return true;
});

ipcMain.handle('list:stop', async (event) => {
  await setListStartStop(false);
  appEvents.emit(APPEVENTS.LIST_STOP);
  return true;
});

ipcMain.handle('app:start', async (event) => {
  return true;
});

ipcMain.handle('app:stop', async (event) => {
  return true;
});


ipcMain.handle('state', async (event) => {
  const state = await getState();
  return state;
});

ipcMain.handle('my-invokable-ipc', async (event, ...args) => {
  const state = await getState();
  // const browser = await getBrowser();
  // const page = await browser.newPage();
  // console.log('args', { browser, page });

  const newState = { ...state, count: state.count + 1 };
  await setState(newState);
  return newState;
})